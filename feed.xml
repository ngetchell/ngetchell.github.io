<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>ngetchell.com</title>
    <link href="https://ngetchell.github.io/feed.xml" rel="self" />
    <link href="https://ngetchell.github.io" />
    <updated>2022-09-06T12:11:58-04:00</updated>
    <author>
        <name>Nicholas M. Getchell</name>
    </author>
    <id>https://ngetchell.github.io</id>

    <entry>
        <title>Get-Command -Syntax vs Get-Help</title>
        <author>
            <name>Nicholas M. Getchell</name>
        </author>
        <link href="https://ngetchell.github.io/get-command-syntax-vs-get-help/"/>
        <id>https://ngetchell.github.io/get-command-syntax-vs-get-help/</id>
            <category term="PowerShell"/>

        <updated>2022-09-06T11:16:07-04:00</updated>
            <summary>
                <![CDATA[
                    Wait, is Get-Help or Get-Command right? At the PowerShell Summit 2015 I witnessed Lee Holmes state that Get-Command is always&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Wait, is Get-Help or Get-Command right? At the PowerShell Summit 2015 I witnessed Lee Holmes state that Get-Command is always the better way to look up the syntax of a <a href="__GHOST_URL__/intro-to-cmdlets/">cmdlet</a>. What did he mean by that? Get-Help and Get-Command are two of the only three cmdlets you need to know. The other being Get-Member. Why do you need both Get-Command AND Get-Help?</p>
<p>A quick glance at the output of both commands reveals that the syntax parameter for Get-Command is similar to the help provided by Get-Help. Their function is very similar but derive their information from slightly different sources. When they show conflicting information, which one is correct?</p>
<h2 id="get-help-limitations">Get-Help Limitations</h2>
<p>To understand the limitations of Get-Help, you need to know where Get-Help gets it’s content from. Get-Help shows the MAML or Comment-Based help written by the module author. It may also show generic help populated by PowerShell at run time. PowerShell will attempt to give you *something *when you ask for help on a cmdlet that doesn’t provide any.</p>
<p>The help built into PowerShell also needs to be updated before you can rely on it. The installed help has to correspond to the version you’re running.</p>
<h2 id="get-command-syntax">Get-Command Syntax</h2>
<p>Get-Command with the Syntax parameter ignores whatever the module author wrote for help and looks directly at the code on your machine to build out what parameters the cmdlet supports.</p>
<p>The distinction is important when the help, or documentation of code is out of date. Another example would be if you used Update-Help and pulled down help for a <em>newer</em> version of the help than what you are running locally. Maybe a parameter was renamed, removed, or added in the help to reflect new functionality that you simply don’t have yet.</p>
<h2 id="source-of-truth">Source of Truth</h2>
<p>The truth is, Get-Command -Syntax should be considered the source of truth when you are sitting at the console. It works out of the box, there isn’t a need to download anything for it to function, and it doesn’t rely on the module author to provide accurate documentation.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Expring Group Membership</title>
        <author>
            <name>Nicholas M. Getchell</name>
        </author>
        <link href="https://ngetchell.github.io/expring-group-membership/"/>
        <id>https://ngetchell.github.io/expring-group-membership/</id>
            <category term="PowerShell"/>

        <updated>2022-06-09T19:48:38-04:00</updated>
            <summary>
                <![CDATA[
                    As a systems administrator working with Active Directory your probably proficient in granting access to network resources. How good are&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>As a systems administrator working with Active Directory your probably proficient in granting access to network resources. How good are you at <em>removing</em> permissions once the access is no longer needed? Probably not as good. Enter Expiring Group Membership in Active Directory. You can specify how long an object belongs in a group. Active Directory handles the removal for you.</p>
<p>To use Expiring Group Memberships, make sure that the feature is enabled in your forest. This is a feature added in Server 2016 and is not on by default.</p>
<pre><code class="language-powershell">## If Enabled EnabledScopes 
## won&#39;t be empty

$Forest = Get-ADForest
Get-ADOptionalFeature -Identity &#39;Privileged Access Management Feature&#39;

## Enable Privileged Access

$enableADOptionalFeatureSplat = @{
    Scope = &#39;ForestOrConfigurationSet&#39;
    Target = $Forest
    Identity = &#39;Privileged Access Management Feature&#39;
}
Enable-ADOptionalFeature @enableADOptionalFeatureSplat
</code></pre>
<p>Existing groups should work but if you don’t have one, create a group now.</p>
<pre><code class="language-powershell">$newADGroupSplat = @{
    GroupCategory = &#39;Security&#39;
    DisplayName = &quot;Temporary Membership&quot;
    GroupScope = &#39;Global&#39;
    Name = &#39;TempGroup&#39;
}
New-ADGroup @newADGroupSplat
</code></pre>
<p>Now add the membership using the MemberTimeToLive parameter.</p>
<pre><code class="language-powershell">$addADGroupMemberSplat = @{
    Members = &#39;ngetchell&#39;
    MemberTimeToLive = ( New-Timespan -Days 365)
    Identity = &#39;TempGroup&#39;
}
Add-ADGroupMember @addADGroupMemberSplat
</code></pre>
<h2 id="expiring-membership-report">Expiring Membership Report</h2>
<p>Now to generate a report to show off a members and their membership timespan. You could even pipe to Excel if you’d prefer.</p>
<pre><code class="language-powershell">Get-ADGroup -Identity TempGroup -ShowMemberTimeToLive -Properties members | 
    Select-Object -ExpandProperty members | 
    ForEach-Object {
    if ( $_ -match &#39;&lt;TTL=&#39; ) {
        $ttlstring, $DN = $_ -split &#39;&gt;&#39;

        [int]$ttl = $ttlstring -replace &#39;&lt;TTL=&#39;
        $Timespan = New-Timespan -Seconds $ttl
        
        [pscustomobject]@{
            MemberDN   = $DN -replace &quot;^,&quot;, &quot;&quot;
            TTL        = $Timespan
            ExpiryDate = $((Get-Date).Add($Timespan))
        } 
    }
    else {
        [pscustomobject]@{
            MemberDN   = $_
            TTL        = 0
            ExpiryDate = 0
        } 
    }
} | Export-Excel -Path ~\Desktop\ExpiringGroupMembers.xlsx
</code></pre>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Logging PowerShell Scripts</title>
        <author>
            <name>Nicholas M. Getchell</name>
        </author>
        <link href="https://ngetchell.github.io/logging-powershell-scripts/"/>
        <id>https://ngetchell.github.io/logging-powershell-scripts/</id>
            <category term="PowerShell"/>

        <updated>2022-09-06T11:16:25-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://ngetchell.github.io/media/posts/5/Annotation-2019-01-17-213025.jpg" alt="" />
                    As you progress from running commands at the console, to scripting tedious work, to automating entire processes you still need&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://ngetchell.github.io/media/posts/5/Annotation-2019-01-17-213025.jpg" alt="" />
                
  <p>
    As you progress from running commands at the console, to scripting tedious work, to automating entire processes you still need to keep an eye on whats running. Nobody likes figuring out what went wrong on in a process by debugging your script. You should integrate logging into any scripts that run unattended. Logging saves time and helps surface errors in your scripts. Luckily, saving to a log file in PowerShell is simple.
  </p>

    <h2 id="outfile">
      Out-File
    </h2>

  <p>
    Out-file is a very simple way to handle writing to a file. Simply put Out-File at the end of your pipeline to save output to a file.
  </p>
<pre class="line-numbers  language-html"><code>$File = "~\Desktop\Out-File.log"
'[Error]: Service failed to restart' | Out-File -File $File -Append</code></pre>

  <p>
    You can also catch errors and put the contents of the error into a file.
  </p>
<pre class="line-numbers  language-html"><code>$File = "~\Desktop\Out-File.log"

try {
    Invoke-RestMethod -URI 'https://doesnotexist' -ErrorAction Stop
} catch {
    $ErrorOutput = $_
    $ErrorOutput | Out-File -File $File -Append
}
</code></pre>

    <h2 id="teeobject">
      Tee-Object
    </h2>

  <p>
    The <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/tee-object?view=powershell-6" target="_blank">Tee-Object</a> cmdlet allows you to split the direction of the pipeline. If you have a Linux background this will sound familar. The pipeline output still continues on but you can save off pipeline output into a file. This makes it easy to see what's going on when your at the console since the output still appears on the screen but you can still save output for later viewing.
  </p>
<pre class="line-numbers  language-html"><code>$File = "~\Desktop\Tee-Object.log"
$Result = Get-Process -Name PowerShell | 
    Tee-Object -FilePath $File -Append 

$Result | 
    Select-Object -Property Name,CPU,ID | 
    Tee-Object -FilePath $File -Append</code></pre>

  <p>
    You can see that the first command saves the output of Get-Process to both the file on your desktop as well as in the $Results variable. Then, we pipe the previous results out, manipulate the output via Select-Object, then call Tee-Object again. This time, the output goes to the console window as well as the log file.
  </p>

  <p>
    Using Tee-Object is a great way to keep pipeline output in the console and in a permanent log. As with Out-File, remember to use the -Append parameter. You probably don’t want to overwrite the log file with each write.
  </p>

    <h2 id="write-to-the-event-log">
      Write to the Event Log
    </h2>
<pre class="line-numbers  language-html"><code>$Logname = 'Getchell.org'
$Source = 'Automated Script'

$NewLog = @{
    Logname = $Logname
    Source = $Source
}

try {
    New-EventLog @NewLog -ErrorAction Stop
} catch [System.InvalidOperationException] {
    # Ignore if source already exists
}

$InformationalLog = @{
    Logname = $Logname
    Source = $Source
    EntryType = 'Information'
    Message = 'Verbose informational message'
    EventId = 19
}

Write-EventLog @InformationalLog</code></pre>

    <h2 id="other-considerations">
      Other Considerations
    </h2>

  <p>
    Working with objects can be a pain to format for logging purposes. If you use the default pipeline view, you <a href="https://powershell.getchell.org/2016/10/26/never-lose-work/" target="_blank">may lose data due to the PowerShell formatting system</a>. A quick way to get around this is to pipe out to ConvertTo-Json before writing the pipeline to a log. This will serialize the object so it can be written to disk without data loss. ConvertTo-Json will also expand any nested properties, something Select-Object -Property * and the Format-* cmdlets won't do.
  </p>
<pre class="line-numbers  language-html"><code>$File = "~\Desktop\object-json.log"

Get-Service -Name BITS | 
    ConvertTo-Json | 
    Tee-Object -FilePath $File -Append</code></pre>

    <h2 id="log-filenames">
      Log Filenames
    </h2>

  <p>
    Another thing to consider is to name logs with timestamp data. If you ever have to debug your automated script you’ll thank yourself later for keeping each run of your process in separate files. I usually use the following convention:
  </p>
<pre class="line-numbers  language-html"><code>$Log = ".\log\process-name-$( Get-Date -Format FileDateTime ).log"</code></pre>

  <p>
    Get-Date has a built-in format that keeps invalid characters out a date/time string for use with filenames. I reference this constantly.
  </p>

    <h2 id="viewing-logs-in-realtime">
      Viewing Logs in Real-Time
    </h2>

  <p>
    I prefer to keep logs as files as I have more experience with grep and with the Event Viewer. For log running processes I <a href="https://powershell.getchell.org/2016/10/19/tail-a-file-in-powershell/" target="_blank">tail the open log files</a> to see progress in real-time. This is great for debugging scheduled tasks where you aren't at the console.
  </p>

  <p>
    
  </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Random Man Page in PowerShell</title>
        <author>
            <name>Nicholas M. Getchell</name>
        </author>
        <link href="https://ngetchell.github.io/random-man-page-in-powershell/"/>
        <id>https://ngetchell.github.io/random-man-page-in-powershell/</id>
            <category term="PowerShell"/>

        <updated>2022-09-06T11:24:38-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://ngetchell.github.io/media/posts/15/Annotation.png" alt="" />
                    PowerShell is a programming language and console application that comes with “batteries included”. The help system and documentation is built&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://ngetchell.github.io/media/posts/15/Annotation.png" alt="" />
                <p>PowerShell is a programming language and console application that comes with “batteries included”. 
The help system and documentation is built in. 
Granted, it arrives in an outdated form for built-in modules and requires an Update-Help to be complete. 
A man page is crucial for understanding commands in Linux.</p>
<p>One of the ways I learn new technology is to read the man page. 
It isn’t the most efficient way to learn, I prefer a combination of books and video training, but I always learn something new, every time I read a man page. 
I find that the cmdlets I know best generate a big surprise when I learn something new about them. 
It helps me round out my knowledge and fill in the gaps.</p>
<p>The PowerShell About help system is as close as PowerShell gets to the man pages found on a Linux box. 
To select a random About topic to read about look at the following code.</p>
<pre><code class="language-powershell"># Update Help so you have all help
Update-Help

# Get A Topic
$Topic = Get-Help about_* | 
    Select-Object -ExpandProperty Name -Unique | 
    Get-Random -Count 1

# Display the Help File
Get-Help -Full -name $Topic
</code></pre>
<p>Turning it into a function is simple. Slap it in your profile if you want it at your disposal.</p>
<pre><code class="language-powershell"># Validated on PS Core 6.1.0
Function Get-RandomAboutHelp {
    $ProgressPreference = &#39;SilentlyContinue&#39;
    $Topic = Get-Help about_* | 
    Select-Object -ExpandProperty Name -Unique | 
    Get-Random -Count 1

    Get-Help -Full -name $Topic | out-string

}

Get-RandomAboutHelp
</code></pre>
<h2 id="task-scheduler-email">Task Scheduler Email</h2>
<p>If you’re interested in automating an email message with a random about topic page try using Task Scheduler and the code below to schedule the email on daily, weekly, or monthly intervals.</p>
<pre><code class="language-powershell">$Body = Get-RandomAboutHelp

$Splat = @{
    To         = &#39;user@domain.com&#39;
    from       = &#39;PSHelp@powershell.org&#39;
    Subject    = &#39;Daily Help Message&#39;
    Body       = $Body 
    SmtpServer = &#39;smtp.domain.com&#39;
}

Send-MailMessage @Splat
</code></pre>
<h2 id="linux-man-pages">Linux Man Pages</h2>
<p>In case you’re wondering now I do it in bash, I use the apripos, awk, and xargs commands then send it to the console. 
You could also save it to a file and attach it in an email but it is outside the scope of this article.</p>
<pre><code class="language-bash">apropos . | awk &#39;{print $1}&#39; | sort -R | head -1 | xargs man
</code></pre>

            ]]>
        </content>
    </entry>
    <entry>
        <title>PSGitLab v3.0.1 Released</title>
        <author>
            <name>Nicholas M. Getchell</name>
        </author>
        <link href="https://ngetchell.github.io/psgitlab-v301-released/"/>
        <id>https://ngetchell.github.io/psgitlab-v301-released/</id>
            <category term="PowerShell"/>

        <updated>2022-09-06T11:24:46-04:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://ngetchell.github.io/media/posts/16/Screen-Shot-2018-10-03-at-2.07.56-PM.png" alt="" />
                    A ton of work went into the v3 version of PSGitLab, both on my part and that of the community.
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://ngetchell.github.io/media/posts/16/Screen-Shot-2018-10-03-at-2.07.56-PM.png" alt="" />
                <p>A ton of work went into the v3 version of PSGitLab, both on my part and that of the community. 
There are new contributors as well as familiar names in the changelog and I am thankful for all of the help. 
My goal of releasing an open source project to help others has been greatly exceeded by the contribution of those in the PowerShell community. 
Over the next few months, I hope to make it easier for new contributors to jump in and add coverage to the GitLab API.</p>
<h2 id="enhancements-and-fixes">Enhancements and Fixes</h2>
<ul>
<li>[Enhancement] ReleaseNotes.md for end users to keep up with what changed version to version.</li>
<li>[Fix] Support for 204 HTTP status codes on DELETE so there aren’t errors thrown when any of the Remove-* functions are called.</li>
<li>[Fix] Hide archived projects by default restored to default (Simon Heather)</li>
<li>[Fix] Switched from POST to PUT verbs on Block and Unblock to follow the GitLab API reference.</li>
<li>[Enhancement] Get-GitLabGroup added (Eduardo de Moura Rodrigues)</li>
<li>[Enhancement] Disable to Progress Bar when running Invoke-WebRequest (Simon Heather)</li>
<li>[Enhancement] Code Cleanup (Wojciech Sciesinski)</li>
<li>[Fix] Support for TLS 1.2 if not enabled on client</li>
<li>[Enhancement] Get-GitLabIssue (Robin Malik)</li>
<li>[Fix] Changed API endpoint for Get-GitLabProject to follow the GitLab API reference.</li>
</ul>
<h2 id="improved-documentation">Improved Documentation</h2>
<p>Announcing the PSGitLab wiki! Over time, I will work to fill in the gaps in regards to starting out with PSGitLab then to go over advanced configuration to get the most out of your cli experience.
Another place for improvement will be developer documentation. 
I would like as many people contributing to PSGitLab as possible. 
That means, drastically reducing the barrier to entry for people starting out with PowerShell. 
I hope the developer on-boarding docs would aid in that.
The goal will be to add all existing features to the wiki then roll out new documentation as new features are added. 
Look for more in this space soon.</p>
<h2 id="the-future-for-psgitlab">The Future for PSGitLab</h2>
<p>In the future, I will be looking to drastically simplify the build and test process, upgrade to Pester v4 syntax, detect the project url via git remote, better default pester tests, and various other enhancement requests.</p>
<p>For now, I will work to make sure the new v3 of PSGitLab didn’t introduce anymore bugs (hence 3.0.1).</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Import a Module from Other Computers</title>
        <author>
            <name>Nicholas M. Getchell</name>
        </author>
        <link href="https://ngetchell.github.io/import-a-module-from-other-computers/"/>
        <id>https://ngetchell.github.io/import-a-module-from-other-computers/</id>
            <category term="PowerShell"/>

        <updated>2022-09-06T11:49:50-04:00</updated>
            <summary>
                <![CDATA[
                    PowerShell comes with a simple way to install a module using PowerShellGet and the Find/Install Module cmdlets. Did you know&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>PowerShell comes with a simple way to install a module using PowerShellGet and the Find/Install Module cmdlets. 
Did you know however that you can import modules, over the network, from a computer that already has them installed? 
They aren’t installed locally and when you run the commands, PowerShell will seamlessly run them in the PowerShell process running on the remote computer.</p>
<p>I am constantly hopping onto different computers at work and not all of the computers have the RSAT tools for Active Directory administration. 
Using the Import-Module with the PSSession parameter lets me use the local console for administration.</p>
<pre><code class="language-powershell">$Session = New-PSSession -Computername DC
Import-Module -PSSession $Session -Name ActiveDirectory

Get-ADUser -identity ngetchell
</code></pre>
<p>The results come back to your own console even though the module resides on the remote box. 
If you’ve ever administered an Exchange Online tenant from PowerShell you’ve likely used this feature. 
Here, we import the entire session, not just one module into your current, local session.</p>
<pre><code class="language-powershell">$Params = @{ 
    ConfigurationName = &#39;Microsoft.Exchange&#39; 
    Authentication    = &#39;Basic&#39;
    AllowRedirection  = $true 
    AllowClobber      = $true 
    ConnectionUri     = &#39;https://outlook.office365.com/powershell-liveid/&#39; 
    Credential        = ( Get-Credential ) 
} 
$Session = New-PSSession @Params 
Import-PSSession $Session
</code></pre>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Git Commit Messages and Hooks</title>
        <author>
            <name>Nicholas M. Getchell</name>
        </author>
        <link href="https://ngetchell.github.io/git-commit-messages-and-hooks/"/>
        <id>https://ngetchell.github.io/git-commit-messages-and-hooks/</id>
            <category term="PowerShell"/>
            <category term="Linux"/>

        <updated>2022-09-06T12:11:58-04:00</updated>
            <summary>
                <![CDATA[
                    Maintaining integrity in your code is hard. Git hooks are an easy way to manage your workflow so you never&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Maintaining integrity in your code is hard. Git hooks are an easy way to manage your workflow so you never commit code that doesn’t meet your standards.</p>
<p>How do you know if the changes you made introduced bugs? Testing of course. Do you know if your code follows best practices? To figure that out, you’d use a linter. In PowerShell the community uses Pester for testing and PSScriptAnalyzer for making sure you follow community standards. Git hooks let you validate your code before it is committed in Git.</p>
<p>Another useful feature that Git provides is the ability to pre-populate your commit message. Maybe your commit messages would benefit from template or maybe a reminder to describe your changes.</p>
<h2 id="pre-commit-hooks">Pre-Commit Hooks</h2>
<p>With the pre-commit hook the key is to make sure your hook exits correctly. Every initialized repository comes with a sample git hooks.</p>
<pre><code class="language-powershell">Get-ChildItem .git\hooks\ -Recurse

Directory: Git:\project\.git\hooks

Mode LastWriteTime Length Name
---- ------------- ------ ----
-a---- 11/20/2017 8:25 PM 478 applypatch-msg.sample
-a---- 11/20/2017 8:25 PM 896 commit-msg.sample
-a---- 11/20/2017 8:25 PM 189 post-update.sample
-a---- 11/20/2017 8:25 PM 424 pre-applypatch.sample
-a---- 11/20/2017 8:25 PM 1642 pre-commit
-a---- 11/20/2017 8:25 PM 1642 pre-commit.sample
-a---- 11/20/2017 8:25 PM 1348 pre-push.sample
-a---- 11/20/2017 8:25 PM 4898 pre-rebase.sample
-a---- 11/20/2017 8:25 PM 544 pre-receive.sample
-a---- 11/20/2017 8:25 PM 1239 prepare-commit-msg.sample
-a---- 11/20/2017 8:25 PM 3610 update.sample
</code></pre>
<p>To start, create a pre-commit file in the .git\hooks\ directory located in your repository.
Since this is a PowerShell blog we’re going to use a bash script to invoke PowerShell.</p>
<pre><code class="language-bash">&gt;#!/bin/sh
c:/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -ExecutionPolicy Bypass -NoProfile -File &#39;.git\hooks\pre-commit.ps1&#39;
</code></pre>
<p>In the pre-commit.ps1 file you can write standard PowerShell code. Write-Host can be used to write errors to the screen.</p>
<p>What governs whether a commit message is saved or not is the exit code PowerShell.exe throws. If you’d like to keep someone from being able to commit, add the following:</p>
<pre><code class="language-powershell">Write-Host &quot;Aborting Commit&quot; -ForegroundColor Red
exit 1
</code></pre>
<h2 id="psscriptanalyzer">PSScriptAnalyzer</h2>
<p>Consider a file named alias.ps1 needs to be added to your repository but was copy and pasted from the PowerShell console.
Now I don’t know about you, but I try to save as many characters as I can when so I use lots of aliases.</p>
<p>When I go to commit the quick script I get an error.
Notice your prompt, I still have one file sitting in the staging area.
The script I attempted to put into source control didn’t meet the standards from PSScriptAnalyzer.</p>
<pre><code class="language-powershell">$Results = Invoke-ScriptAnalyzer -Severity Error, Warning .\ -Recurse

if ( $Results.count -gt 0 ) {
    &quot;Found {0} issues&quot; -f $Results.Count
    $Results
    exit 1
}
</code></pre>
<h2 id="pester">Pester</h2>
<p>If you’ve been writing Pester tests with your work you can also leverage your work to make sure you always commit clean code. Consider the the following tests:</p>
<pre><code class="language-powershell">Describe &quot;Addition&quot; {
    It &quot;Can&#39;t Add&quot; {
        5 | should be 4
    }
}
</code></pre>
<p>It is designed to fail to illustrate the ability to keep git from finalizing your commit. Our pre-commit.ps1 file will look similar to our previous one. It will abort the commit on any failing Pester tests.</p>
<pre><code class="language-powershell">$Results = Invoke-Pester -Show Failed, describe -PassThru

if ( $Results.FailedCount -gt 0 ) {
    exit 1
}
</code></pre>
<h2 id="other-uses">Other Uses</h2>
<p>You can also use pre-commit hooks to sign your PowerShell files to make sure they comply with security practices on your network. Another use could be to put your .ps1 files through a code formater that makes sure you’re following company code styles.</p>
<h2 id="commit-messages">Commit Messages</h2>
<p>Commit messages have a nasty habit of devolving.To combat this tendency git has a configuration where you can add information and instructions to your commit message so you are reminded to leave the useful comments.</p>
<p>First, create a text file with your template commit message. Here is a simple example of a commit message that keeps you on track. Remember, anything that begins with a ‘#’ character is ignored in a commit message.</p>
<pre><code>## Subject 


## Body


## Files Changed


## Link to Issue in tracker
To associate the template with your local repository use the following.
</code></pre>
<pre><code class="language-bash">git config --global commit.template .\commit_template.txt
</code></pre>

            ]]>
        </content>
    </entry>
</feed>
