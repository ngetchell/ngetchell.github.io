{
    "version": "https://jsonfeed.org/version/1",
    "title": "ngetchell.com",
    "description": "",
    "home_page_url": "https://ngetchell.github.io",
    "feed_url": "https://ngetchell.github.io/feed.json",
    "user_comment": "",
    "author": {
        "name": "Nicholas M. Getchell"
    },
    "items": [
        {
            "id": "https://ngetchell.github.io/random-man-page-in-powershell/",
            "url": "https://ngetchell.github.io/random-man-page-in-powershell/",
            "title": "Random Man Page in PowerShell",
            "summary": "PowerShell is a programming language and console application that comes with “batteries included”. The help system and documentation is built&hellip;",
            "content_html": "<p>PowerShell is a programming language and console application that comes with “batteries included”. \nThe help system and documentation is built in. \nGranted, it arrives in an outdated form for built-in modules and requires an Update-Help to be complete. \nA man page is crucial for understanding commands in Linux.</p>\n<p>One of the ways I learn new technology is to read the man page. \nIt isn’t the most efficient way to learn, I prefer a combination of books and video training, but I always learn something new, every time I read a man page. \nI find that the cmdlets I know best generate a big surprise when I learn something new about them. \nIt helps me round out my knowledge and fill in the gaps.</p>\n<p>The PowerShell About help system is as close as PowerShell gets to the man pages found on a Linux box. \nTo select a random About topic to read about look at the following code.</p>\n<pre><code class=\"language-powershell\"># Update Help so you have all help\nUpdate-Help\n\n# Get A Topic\n$Topic = Get-Help about_* | \n    Select-Object -ExpandProperty Name -Unique | \n    Get-Random -Count 1\n\n# Display the Help File\nGet-Help -Full -name $Topic\n</code></pre>\n<p>Turning it into a function is simple. Slap it in your profile if you want it at your disposal.</p>\n<pre><code class=\"language-powershell\"># Validated on PS Core 6.1.0\nFunction Get-RandomAboutHelp {\n    $ProgressPreference = &#39;SilentlyContinue&#39;\n    $Topic = Get-Help about_* | \n    Select-Object -ExpandProperty Name -Unique | \n    Get-Random -Count 1\n\n    Get-Help -Full -name $Topic | out-string\n\n}\n\nGet-RandomAboutHelp\n</code></pre>\n<h2 id=\"task-scheduler-email\">Task Scheduler Email</h2>\n<p>If you’re interested in automating an email message with a random about topic page try using Task Scheduler and the code below to schedule the email on daily, weekly, or monthly intervals.</p>\n<pre><code class=\"language-powershell\">$Body = Get-RandomAboutHelp\n\n$Splat = @{\n    To         = &#39;user@domain.com&#39;\n    from       = &#39;PSHelp@powershell.org&#39;\n    Subject    = &#39;Daily Help Message&#39;\n    Body       = $Body \n    SmtpServer = &#39;smtp.domain.com&#39;\n}\n\nSend-MailMessage @Splat\n</code></pre>\n<h2 id=\"linux-man-pages\">Linux Man Pages</h2>\n<p>In case you’re wondering now I do it in bash, I use the apripos, awk, and xargs commands then send it to the console. \nYou could also save it to a file and attach it in an email but it is outside the scope of this article.</p>\n<pre><code class=\"language-bash\">apropos . | awk &#39;{print $1}&#39; | sort -R | head -1 | xargs man\n</code></pre>\n",
            "image": "https://ngetchell.github.io/media/posts/15/Annotation.png",
            "author": {
                "name": "Nicholas M. Getchell"
            },
            "tags": [
            ],
            "date_published": "2022-09-06T11:19:07-04:00",
            "date_modified": "2022-09-06T11:19:07-04:00"
        },
        {
            "id": "https://ngetchell.github.io/get-command-syntax-vs-get-help/",
            "url": "https://ngetchell.github.io/get-command-syntax-vs-get-help/",
            "title": "Get-Command -Syntax vs Get-Help",
            "summary": "Wait, is Get-Help or Get-Command right? At the PowerShell Summit 2015 I witnessed Lee Holmes state that Get-Command is always&hellip;",
            "content_html": "<p>Wait, is Get-Help or Get-Command right? At the PowerShell Summit 2015 I witnessed Lee Holmes state that Get-Command is always the better way to look up the syntax of a <a href=\"__GHOST_URL__/intro-to-cmdlets/\">cmdlet</a>. What did he mean by that? Get-Help and Get-Command are two of the only three cmdlets you need to know. The other being Get-Member. Why do you need both Get-Command AND Get-Help?</p>\n<p>A quick glance at the output of both commands reveals that the syntax parameter for Get-Command is similar to the help provided by Get-Help. Their function is very similar but derive their information from slightly different sources. When they show conflicting information, which one is correct?</p>\n<h2 id=\"get-help-limitations\">Get-Help Limitations</h2>\n<p>To understand the limitations of Get-Help, you need to know where Get-Help gets it’s content from. Get-Help shows the MAML or Comment-Based help written by the module author. It may also show generic help populated by PowerShell at run time. PowerShell will attempt to give you *something *when you ask for help on a cmdlet that doesn’t provide any.</p>\n<p>The help built into PowerShell also needs to be updated before you can rely on it. The installed help has to correspond to the version you’re running.</p>\n<h2 id=\"get-command-syntax\">Get-Command Syntax</h2>\n<p>Get-Command with the Syntax parameter ignores whatever the module author wrote for help and looks directly at the code on your machine to build out what parameters the cmdlet supports.</p>\n<p>The distinction is important when the help, or documentation of code is out of date. Another example would be if you used Update-Help and pulled down help for a <em>newer</em> version of the help than what you are running locally. Maybe a parameter was renamed, removed, or added in the help to reflect new functionality that you simply don’t have yet.</p>\n<h2 id=\"source-of-truth\">Source of Truth</h2>\n<p>The truth is, Get-Command -Syntax should be considered the source of truth when you are sitting at the console. It works out of the box, there isn’t a need to download anything for it to function, and it doesn’t rely on the module author to provide accurate documentation.</p>\n",
            "author": {
                "name": "Nicholas M. Getchell"
            },
            "tags": [
                   "PowerShell"
            ],
            "date_published": "2022-07-16T18:43:32-04:00",
            "date_modified": "2022-09-06T11:16:07-04:00"
        },
        {
            "id": "https://ngetchell.github.io/expring-group-membership/",
            "url": "https://ngetchell.github.io/expring-group-membership/",
            "title": "Expring Group Membership",
            "summary": "As a systems administrator working with Active Directory your probably proficient in granting access to network resources. How good are&hellip;",
            "content_html": "<p>As a systems administrator working with Active Directory your probably proficient in granting access to network resources. How good are you at <em>removing</em> permissions once the access is no longer needed? Probably not as good. Enter Expiring Group Membership in Active Directory. You can specify how long an object belongs in a group. Active Directory handles the removal for you.</p>\n<p>To use Expiring Group Memberships, make sure that the feature is enabled in your forest. This is a feature added in Server 2016 and is not on by default.</p>\n<pre><code class=\"language-powershell\">## If Enabled EnabledScopes \n## won&#39;t be empty\n\n$Forest = Get-ADForest\nGet-ADOptionalFeature -Identity &#39;Privileged Access Management Feature&#39;\n\n## Enable Privileged Access\n\n$enableADOptionalFeatureSplat = @{\n    Scope = &#39;ForestOrConfigurationSet&#39;\n    Target = $Forest\n    Identity = &#39;Privileged Access Management Feature&#39;\n}\nEnable-ADOptionalFeature @enableADOptionalFeatureSplat\n</code></pre>\n<p>Existing groups should work but if you don’t have one, create a group now.</p>\n<pre><code class=\"language-powershell\">$newADGroupSplat = @{\n    GroupCategory = &#39;Security&#39;\n    DisplayName = &quot;Temporary Membership&quot;\n    GroupScope = &#39;Global&#39;\n    Name = &#39;TempGroup&#39;\n}\nNew-ADGroup @newADGroupSplat\n</code></pre>\n<p>Now add the membership using the MemberTimeToLive parameter.</p>\n<pre><code class=\"language-powershell\">$addADGroupMemberSplat = @{\n    Members = &#39;ngetchell&#39;\n    MemberTimeToLive = ( New-Timespan -Days 365)\n    Identity = &#39;TempGroup&#39;\n}\nAdd-ADGroupMember @addADGroupMemberSplat\n</code></pre>\n<h2 id=\"expiring-membership-report\">Expiring Membership Report</h2>\n<p>Now to generate a report to show off a members and their membership timespan. You could even pipe to Excel if you’d prefer.</p>\n<pre><code class=\"language-powershell\">Get-ADGroup -Identity TempGroup -ShowMemberTimeToLive -Properties members | \n    Select-Object -ExpandProperty members | \n    ForEach-Object {\n    if ( $_ -match &#39;&lt;TTL=&#39; ) {\n        $ttlstring, $DN = $_ -split &#39;&gt;&#39;\n\n        [int]$ttl = $ttlstring -replace &#39;&lt;TTL=&#39;\n        $Timespan = New-Timespan -Seconds $ttl\n        \n        [pscustomobject]@{\n            MemberDN   = $DN -replace &quot;^,&quot;, &quot;&quot;\n            TTL        = $Timespan\n            ExpiryDate = $((Get-Date).Add($Timespan))\n        } \n    }\n    else {\n        [pscustomobject]@{\n            MemberDN   = $_\n            TTL        = 0\n            ExpiryDate = 0\n        } \n    }\n} | Export-Excel -Path ~\\Desktop\\ExpiringGroupMembers.xlsx\n</code></pre>\n",
            "author": {
                "name": "Nicholas M. Getchell"
            },
            "tags": [
                   "PowerShell"
            ],
            "date_published": "2019-02-13T03:00:00-05:00",
            "date_modified": "2022-06-09T19:48:38-04:00"
        },
        {
            "id": "https://ngetchell.github.io/logging-powershell-scripts/",
            "url": "https://ngetchell.github.io/logging-powershell-scripts/",
            "title": "Logging PowerShell Scripts",
            "summary": "As you progress from running commands at the console, to scripting tedious work, to automating entire processes you still need&hellip;",
            "content_html": "\n  <p>\n    As you progress from running commands at the console, to scripting tedious work, to automating entire processes you still need to keep an eye on whats running. Nobody likes figuring out what went wrong on in a process by debugging your script. You should integrate logging into any scripts that run unattended. Logging saves time and helps surface errors in your scripts. Luckily, saving to a log file in PowerShell is simple.\n  </p>\n\n    <h2 id=\"outfile\">\n      Out-File\n    </h2>\n\n  <p>\n    Out-file is a very simple way to handle writing to a file. Simply put Out-File at the end of your pipeline to save output to a file.\n  </p>\n<pre class=\"line-numbers  language-html\"><code>$File = \"~\\Desktop\\Out-File.log\"\n'[Error]: Service failed to restart' | Out-File -File $File -Append</code></pre>\n\n  <p>\n    You can also catch errors and put the contents of the error into a file.\n  </p>\n<pre class=\"line-numbers  language-html\"><code>$File = \"~\\Desktop\\Out-File.log\"\n\ntry {\n    Invoke-RestMethod -URI 'https://doesnotexist' -ErrorAction Stop\n} catch {\n    $ErrorOutput = $_\n    $ErrorOutput | Out-File -File $File -Append\n}\n</code></pre>\n\n    <h2 id=\"teeobject\">\n      Tee-Object\n    </h2>\n\n  <p>\n    The <a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/tee-object?view=powershell-6\" target=\"_blank\">Tee-Object</a> cmdlet allows you to split the direction of the pipeline. If you have a Linux background this will sound familar. The pipeline output still continues on but you can save off pipeline output into a file. This makes it easy to see what's going on when your at the console since the output still appears on the screen but you can still save output for later viewing.\n  </p>\n<pre class=\"line-numbers  language-html\"><code>$File = \"~\\Desktop\\Tee-Object.log\"\n$Result = Get-Process -Name PowerShell | \n    Tee-Object -FilePath $File -Append \n\n$Result | \n    Select-Object -Property Name,CPU,ID | \n    Tee-Object -FilePath $File -Append</code></pre>\n\n  <p>\n    You can see that the first command saves the output of Get-Process to both the file on your desktop as well as in the $Results variable. Then, we pipe the previous results out, manipulate the output via Select-Object, then call Tee-Object again. This time, the output goes to the console window as well as the log file.\n  </p>\n\n  <p>\n    Using Tee-Object is a great way to keep pipeline output in the console and in a permanent log. As with Out-File, remember to use the -Append parameter. You probably don’t want to overwrite the log file with each write.\n  </p>\n\n    <h2 id=\"write-to-the-event-log\">\n      Write to the Event Log\n    </h2>\n<pre class=\"line-numbers  language-html\"><code>$Logname = 'Getchell.org'\n$Source = 'Automated Script'\n\n$NewLog = @{\n    Logname = $Logname\n    Source = $Source\n}\n\ntry {\n    New-EventLog @NewLog -ErrorAction Stop\n} catch [System.InvalidOperationException] {\n    # Ignore if source already exists\n}\n\n$InformationalLog = @{\n    Logname = $Logname\n    Source = $Source\n    EntryType = 'Information'\n    Message = 'Verbose informational message'\n    EventId = 19\n}\n\nWrite-EventLog @InformationalLog</code></pre>\n\n    <h2 id=\"other-considerations\">\n      Other Considerations\n    </h2>\n\n  <p>\n    Working with objects can be a pain to format for logging purposes. If you use the default pipeline view, you <a href=\"https://powershell.getchell.org/2016/10/26/never-lose-work/\" target=\"_blank\">may lose data due to the PowerShell formatting system</a>. A quick way to get around this is to pipe out to ConvertTo-Json before writing the pipeline to a log. This will serialize the object so it can be written to disk without data loss. ConvertTo-Json will also expand any nested properties, something Select-Object -Property * and the Format-* cmdlets won't do.\n  </p>\n<pre class=\"line-numbers  language-html\"><code>$File = \"~\\Desktop\\object-json.log\"\n\nGet-Service -Name BITS | \n    ConvertTo-Json | \n    Tee-Object -FilePath $File -Append</code></pre>\n\n    <h2 id=\"log-filenames\">\n      Log Filenames\n    </h2>\n\n  <p>\n    Another thing to consider is to name logs with timestamp data. If you ever have to debug your automated script you’ll thank yourself later for keeping each run of your process in separate files. I usually use the following convention:\n  </p>\n<pre class=\"line-numbers  language-html\"><code>$Log = \".\\log\\process-name-$( Get-Date -Format FileDateTime ).log\"</code></pre>\n\n  <p>\n    Get-Date has a built-in format that keeps invalid characters out a date/time string for use with filenames. I reference this constantly.\n  </p>\n\n    <h2 id=\"viewing-logs-in-realtime\">\n      Viewing Logs in Real-Time\n    </h2>\n\n  <p>\n    I prefer to keep logs as files as I have more experience with grep and with the Event Viewer. For log running processes I <a href=\"https://powershell.getchell.org/2016/10/19/tail-a-file-in-powershell/\" target=\"_blank\">tail the open log files</a> to see progress in real-time. This is great for debugging scheduled tasks where you aren't at the console.\n  </p>\n\n  <p>\n    \n  </p>",
            "image": "https://ngetchell.github.io/media/posts/5/Annotation-2019-01-17-213025.jpg",
            "author": {
                "name": "Nicholas M. Getchell"
            },
            "tags": [
                   "PowerShell"
            ],
            "date_published": "2019-01-23T04:21:00-05:00",
            "date_modified": "2022-09-06T11:16:25-04:00"
        }
    ]
}
